#+TITLE: Operator System 操作系统(第四版) 电子工业出版社
* Interruption and Excetion
** 中断/异常响应
- 中断是外部设备或时钟部件发给CPU的,故在CPU控制部件需要增设一个能检测中断的机构。
  在每条机器指令执行周期的最后时刻扫描中断寄存器是否有中断信号。若有则无条件转入
  操作系统内核的中断处理程序。
- 异常是所执行的指令本身的原因发生的，指令的实现逻辑发现异常发生则转入操作系统内
  核异常处理程序。
** 中断点和回复点
** 核心态和用户态
- 
** 中断／异常向量及PS和PC寄存器
- 向量中除了存储了中断／异常处理程序的入口外，还常用来保存CPU状态转换的信息，如：中断／异常处理程序运行要用到的新PS寄存器和新PC寄存器。
- PC是程序计数器寄存器,CPU的取指令不见是根据它到主存中去指令的。
- PS寄存器描述CPU的执行状态，主要包含处理机当前的运行态、处理机优先级、屏蔽外中断否等标志位。
* 操作系统运行模型
** 内核态程序
1. 系统初始化模块
2. 进程管理模块
3. 存储管理模块
4. I/O设备管理模块
5. 文件管理模块
** 操作系统运行模式 (p35)
*** 独立运行的内核早期操作系统的实现方式
- 操作系统的执行不与任何用户进程关联，它有自己独立的存储空间。缺点：内核程序的并
  发实现困难。例如：当一个I/O请求发给外设后，外设进行I/O需要一定时间，内核因此阻
  塞，而处理及去运行别进程，而别的进程就不可能在激活内核程序。
*** 嵌入用户进程中运行模式
- 所谓的操作系统运行与用户进程，只是利用了附属于该进程的核心栈。操作系统空间独立
   于用户进程的用户空间。
- 当运行程序的处理机自陷或遇到中断时，处理机转到核心态下运行，控制转移给操作系统,用
  户程序的现场被保存起来，启用刚被中断进程的核心栈作为以后程序的执行。程序被认为
  还是在该用户的进程中执行。运行完内核程序之后则可进行进程调度切换。
- 
*** 微内核运行模式
- 将原来由内核态实现的大部分操作系统功能由一些用户态运行的进程来实现，系统调用转
  接代码、进程调度切换代码和中断处理程序还是在内核态下嵌入在被中断的进程核心栈来
  执行。


* 系统调用
- 系统调用是操作系统内核和用户态运行程序之间的接口。
** 自陷指令
- 如在PDP-11机器上提供一条自陷指令 trap。当CPU执行该指令时硬件自动完成如下步骤：
  1. PS内容压入现场栈。
  2. PC内容压入现场栈。
  3. 从中断向量034单元中取出内容装入PS。
  4. 从中断向量036单元中取出内容装入PC。
  Unix操作系统 trap + 类型号
** 操作系统调用的实现
- 由于用户程序利用硬件提供的trap指令向操作系统发出服务请求，当处理机执行trap指令
  时，由中断／异常机制将控制转入相应的陷入处理程序。该处理程序首先进行系统调用参
  数的传递，然后根据系统调用散转表调用相应的服务程序。
* 进程与处理机管理
** 进程的定义:进程可以理解为程序对数据或请求的处理过程。具体由4方面组成：
1. 进程至包括至少一个可执行程序，含有代码和初始数据，一般在进程创建时说明。可
   执行程序可以被多个进程共享，也就是多个进程可能运行同一个可执行程序。
2. 进程至少包括一个独立的进程用户空间，在创建时由操作系统分配。
3. 进程包括系统资源。这是指在进程创建及执行过程中，有操作系统分配给进程的系统资源，包括I／O设备，文件等。
4. 进程包括一个执行栈区，包含运行现场信息，如子程序调用时所压栈帧等，这是系统
   运行及进程调度进行处理机切换时所要涉及的数据。
** 进程控制块 (Proecess Control Block, PCB)


